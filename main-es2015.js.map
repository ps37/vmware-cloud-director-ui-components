{"version":3,"sources":["/home/travis/build/ps37/vmware-cloud-director-ui-components/dist/components/fesm2015/vcd-ui-components.js","/home/travis/build/ps37/vmware-cloud-director-ui-components/dist/components/vcd-ui-components.d.ts.ɵb.html","/home/travis/build/ps37/vmware-cloud-director-ui-components/dist/components/vcd-ui-components.d.ts.ɵg.html","/home/travis/build/ps37/vmware-cloud-director-ui-components/dist/components/vcd-ui-components.d.ts.ɵi.html","/home/travis/build/ps37/vmware-cloud-director-ui-components/dist/components/vcd-ui-components.d.ts.ɵl.html","/home/travis/build/ps37/vmware-cloud-director-ui-components/dist/doc-lib/fesm2015/vcd-ui-doc-lib.js","/home/travis/build/ps37/vmware-cloud-director-ui-components/dist/doc-lib/vcd-ui-doc-lib.d.ts.ɵe.html","/home/travis/build/ps37/vmware-cloud-director-ui-components/dist/doc-lib/vcd-ui-doc-lib.d.ts.ɵg.html","/home/travis/build/ps37/vmware-cloud-director-ui-components/dist/doc-lib/vcd-ui-doc-lib.d.ts.ɵj.html","/home/travis/build/ps37/vmware-cloud-director-ui-components/dist/doc-lib/vcd-ui-doc-lib.d.ts.ɵl.html","/home/travis/build/ps37/vmware-cloud-director-ui-components/dist/doc-lib/vcd-ui-doc-lib.d.ts.ɵm.html","./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/components/cliptext/cliptext-datagrid.example.component.ts.CliptextDatagridExampleComponent.html","./src/components/cliptext/cliptext-datagrid.example.component.ts","./src/components/cliptext/cliptext-dynamic-inline.example.component.ts.CliptextDynamicInlineExampleComponent.html","./src/components/cliptext/cliptext-dynamic-inline.example.component.ts","./src/components/cliptext/cliptext.examples.module.ts","./src/components/data-exporter/data-exporter.example.component.ts.DataExporterExampleComponent.html","./src/components/data-exporter/data-exporter.example.component.ts","./src/components/data-exporter/data-exporter.examples.module.ts","./src/components/datagrid/datagrid-css-classes.example.component.ts.DatagridCssClassesExampleComponent.html","./src/components/datagrid/datagrid-css-classes.example.component.ts","./src/components/datagrid/datagrid-show-hide.example.component.ts.DatagridShowHideExampleComponent.html","./src/components/datagrid/datagrid-show-hide.example.component.ts","./src/components/datagrid/datagrid-three-renderers.example.component.ts.ThreeRenderersDatagridExampleComponent.html","./src/components/datagrid/datagrid-three-renderers.example.component.ts","./src/components/datagrid/datagrid.example.module.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4O;AAC/J;AACP;AACwB;;AAE9F;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,mCAAmC,cAAc;AACjD,mBAAmB,EAAE;AACrB,0CAA0C,iBAAiB;AAC3D;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA,aAAa;AACb;AACA,wDAAwD,wEAAkB,EAAE,iDAAiD,iCAAiC,EAAE,iDAAiD;AACjN;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA,qCAAqC,0DAAY;AACjD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,8BAA8B,yBAAyB,YAAY,yCAAyC;AAC5G;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,wDAAwD,0DAAW;AACnE;AACA,SAAS,KAAK;AACd,6BAA6B,wDAAS;AACtC;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,gLAAgL,gBAAgB,wmBAAwmB,mBAAmB,kIAAkI,kDAAkD,iDAAiD,kBAAkB;AACljC,uCAAuC,kBAAkB,qBAAqB,mBAAmB,kBAAkB,SAAS,UAAU;AACtI,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,eAAe,OAAO,mDAAK,EAAE;AAC7B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,oBAAoB,OAAO,mDAAK,EAAE;AAClC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,YAAY,OAAO,mDAAK,EAAE;AAC1B,kBAAkB,OAAO,oDAAM,EAAE;AACjC,yBAAyB,OAAO,oDAAM,EAAE;AACxC;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA,0BAA0B,4DAAY,EAAE,kEAAmB,EAAE,0DAAa;AAC1E;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kBAAkB;AAC9B;AACA,+BAA+B,0DAAY;AAC3C;AACA;AACA,sEAAsE,qBAAqB;AAC3F,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,iDAAiD;AACjD;AACA,yDAAyD,EAAE;AAC3D;AACA,kCAAkC,EAAE;AACpC,mEAAmE,EAAE;AACrE;AACA;AACA,qDAAqD,EAAE;AACvD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,kOAAkO,wEAAwE,wDAAwD,KAAK,oDAAoD,8EAA8E,sBAAsB,uFAAuF,wOAAwO,+CAA+C,2HAA2H,mFAAmF,6MAA6M,kEAAkE;AAC10C,aAAa;AACb;AACA;AACA,eAAe,OAAO,mDAAK,EAAE;AAC7B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,2BAA2B,OAAO,mDAAK,EAAE;AACzC,mBAAmB,OAAO,oDAAM,EAAE;AAClC,qBAAqB,OAAO,uDAAS,SAAS,8DAAiB,GAAG,gBAAgB,IAAI;AACtF,gCAAgC,OAAO,mDAAK,EAAE;AAC9C;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,aAAa,6BAA6B;AAC1C,IAAI,gCAAgC;AACpC;AACA;AACA;AACA;AACA,uCAAuC,kEAAkE;AACzG;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,8DAAgB,EAAE;AAC9B,KAAK,OAAO,sEAAwB;AACpC;AACA;AACA,kCAAkC,OAAO,mDAAK,EAAE;AAChD;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iCAAiC;AAChD;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2DAAW;AAClC;AACA,iDAAiD,wDAAQ;AACzD;AACA;AACA;AACA,KAAK,OAAO,kDAAI;AAChB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,6BAA6B,OAAO,oDAAM,SAAS,uDAAS,IAAI;AACrE;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,kDAAI;AAChB;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA,MAAM,yBAAyB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,kBAAkB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,kBAAkB,eAAe;AACjC;AACA,aAAa;AACb;AACA;AACA,cAAc,OAAO,mDAAK,EAAE;AAC5B;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,4DAAY,EAAE,0DAAa,eAAe,kEAAmB;AACvF;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;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Ac,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA,6CAA6C,gBAAgB,cAAc;AAC3E,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,8DAAc;AAC1B;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,YAAY,gDAAgD,0CAA0C;AACtG,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,qDAAqD,+BAA+B,SAAS,gCAAgC;AAC7H,wCAAwC,+BAA+B;AACvE;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC,SAAS;AACT,KAAK;AACL;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE,MAAM,oBAAoB;AACvD;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU,UAAU,qBAAqB;AACrD;AACA,sDAAsD,wEAAkB,EAAE,+CAA+C,+BAA+B,EAAE,+CAA+C;;AAEzM;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oCAAoC,8CAAK;AACzC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oCAAoC,8CAAK;AACzC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oCAAoC,8CAAK;AACzC;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,8CAAK;AACpB;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gCAAgC,OAAO,mDAAK,EAAE;AAC9C,iBAAiB,OAAO,mDAAK,EAAE;AAC/B;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,0DAAa,EAAE,4DAAY;AACrD;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,sCAAsC,iCAAiC;AACvE;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,0IAA0I,uBAAuB,+EAA+E,kCAAkC;AAClR,4CAA4C,aAAa,+BAA+B,OAAO,4CAA4C,aAAa,uBAAuB,0DAA0D,0BAA0B,yBAAyB,qDAAqD,0BAA0B,kBAAkB,uBAAuB,4BAA4B,yBAAyB,eAAe,0CAA0C,mBAAmB;AACrhB,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,sEAAwB;AACpC;AACA;AACA,oBAAoB,OAAO,mDAAK,EAAE;AAClC,wBAAwB,OAAO,uDAAS,8BAA8B,qBAAqB,8DAAgB,EAAE,IAAI;AACjH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA,8BAA8B,aAAa,iBAAiB,kBAAkB;AAC9E,aAAa;AACb;AACA;AACA;AACA,KAAK,sCAAsC;AAC3C,KAAK;AACL;AACA;AACA,iBAAiB,OAAO,mDAAK,EAAE;AAC/B;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,0DAAa,EAAE,4DAAY;AACrD;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,0DAAa,EAAE,4DAAY;AACrD;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,4YAA4Y,YAAY,2CAA2C,YAAY,skBAAskB,YAAY,2CAA2C,YAAY;AACxlC,2CAA2C,aAAa;AACxD,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,iBAAiB,OAAO,mDAAK,EAAE;AAC/B;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,0DAAa,EAAE,4DAAY;AACrD;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,0DAAa,EAAE,4DAAY;AACrD;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA,UAAU;AACV;AACA,0CAA0C,4DAAc;AACxD;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,e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","file":"main-es2015.js","sourcesContent":["import { Injectable, ɵɵdefineInjectable, EventEmitter, Component, Input, Output, NgModule, ViewChild, Directive, ViewContainerRef, ComponentFactoryResolver, Pipe, Inject, LOCALE_ID, ChangeDetectorRef, HostBinding } from '@angular/core';\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule, DecimalPipe, DatePipe } from '@angular/common';\nimport { ClarityModule, ClrDatagridFilter, ClrIfOpen, ClrTooltipContent } from '@clr/angular';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: data-exporter/csv-exporter.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Encodes a data set to be downloaded as a CSV\n */\nclass CsvExporterService {\n    /**\n     * Creates a string that can be used to create a Blob for a CSV\n     * @param {?} rows 2D array of data. First row is the names for the fields\n     * @return {?}\n     */\n    createCsv(rows) {\n        return rows.map((/**\n         * @param {?} row\n         * @return {?}\n         */\n        row => processRow(row))).join('\\n');\n    }\n    /**\n     * Does a client side download\n     * @param {?} csvFile The string contents of a CSV file to be downloaded\n     * @param {?} filename The name of the file to be downloaded\n     * @return {?}\n     */\n    downloadCsvFile(csvFile, filename) {\n        /** @type {?} */\n        const mimeType = 'text/csv;charset=utf-8;';\n        /** @type {?} */\n        const blob = new Blob([csvFile], { type: mimeType });\n        // Jan 1, 2020 - Chrome and IE support this\n        if (navigator.msSaveBlob) {\n            navigator.msSaveBlob(blob, filename);\n        }\n        else {\n            /** @type {?} */\n            const link = document.createElement('a');\n            /** @type {?} */\n            const url = URL.createObjectURL(blob);\n            link.setAttribute('href', url);\n            link.setAttribute('download', filename);\n            link.style.visibility = 'hidden';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    }\n}\nCsvExporterService.decorators = [\n    { type: Injectable, args: [{\n                providedIn: 'root',\n            },] }\n];\n/** @nocollapse */ CsvExporterService.ngInjectableDef = ɵɵdefineInjectable({ factory: function CsvExporterService_Factory() { return new CsvExporterService(); }, token: CsvExporterService, providedIn: \"root\" });\n/**\n * Returns a string\n * @param {?} row A list of cells to be turned into a CSV string, separated by commas\n * @return {?}\n */\nfunction processRow(row) {\n    return row.map((/**\n     * @param {?} cell\n     * @return {?}\n     */\n    cell => encodeValue(cell))).join(',');\n}\n/**\n * Returns a cell's cellValue encoded against spaces, quotes, and CSV injection character\n * @param {?} cellValue Cell cellValue to be encoded\n * @return {?}\n */\nfunction encodeValue(cellValue) {\n    /** @type {?} */\n    let innerValue = cellValue == null ? '' : cellValue.toString();\n    if (cellValue instanceof Date) {\n        innerValue = cellValue.toLocaleString();\n    }\n    // Double quotes are doubled\n    /** @type {?} */\n    let result = innerValue.replace(/\"/g, '\"\"');\n    // TODO: See https://jira.eng.vmware.com/browse/VDUCC-59\n    // result = escapeAgainstCsvInjection(result);\n    // Add quotes around the whole thing if it contains new lines\n    if (result.search(/[\",\\n]/g) >= 0) {\n        result = `\"${result}\"`;\n    }\n    // Escape against\n    return result;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: data-exporter/data-exporter.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A dialog to export data\n *\n *  - Allows the UI to select columns to be exported\n *  - Provides a progress indicator\n *  - Converts the data that is fetched by the caller into a CSV\n */\nclass DataExporterComponent {\n    /**\n     * @param {?} csvExporterService\n     */\n    constructor(csvExporterService) {\n        this.csvExporterService = csvExporterService;\n        /**\n         * List of columns that can be exported, user may deselect some before sending the download request\n         */\n        this.columns = [];\n        /**\n         * The name of the file to be downloaded\n         */\n        this.fileName = 'data-export.csv';\n        /**\n         * Text for the Dialog Header\n         */\n        this.dialogHeader = 'Select Columns';\n        /**\n         * Whether a box to select/deselect all rows is available\n         */\n        this.showSelectAll = true;\n        this._open = false;\n        /**\n         * Fires when {\\@link _open} changes. Its parameter indicates the new state.\n         */\n        this.openChange = new EventEmitter();\n        /**\n         * Called when the export is ready to be created\n         */\n        this.dataExportRequest = new EventEmitter();\n        this._isRequestPending = false;\n        this._progress = 0;\n    }\n    /**\n     * Whether the dialog is open\n     * @param {?} value\n     * @return {?}\n     */\n    set open(value) {\n        this._open = value;\n        this.openChange.emit(value);\n    }\n    /**\n     * @return {?}\n     */\n    get open() {\n        return this._open;\n    }\n    /**\n     * True between the time {\\@link dataExportRequest} fires and {\\@link DataExportRequestEvent.exportData} is called\n     * or an error is thrown\n     * @return {?}\n     */\n    get isRequestPending() {\n        return this._isRequestPending;\n    }\n    /**\n     * Number between 0-1, used for displaying the progress bar.\n     * @return {?}\n     */\n    get progress() {\n        return this._progress;\n    }\n    /**\n     * @return {?}\n     */\n    onClickExport() {\n        this._isRequestPending = true;\n        this.dataExportRequest.emit({\n            exportData: this.exportData.bind(this),\n            updateProgress: this.updateProgress.bind(this),\n            selectedColumns: this.columns.filter((/**\n             * @param {?} col\n             * @return {?}\n             */\n            col => this.formGroup.controls[col.fieldName].value)),\n        });\n    }\n    /**\n     * @return {?}\n     */\n    onClickCheckAll() {\n        for (const column of this.columns) {\n            this.formGroup.controls[column.fieldName].setValue(true);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get isSelectAllEnabled() {\n        for (const column of this.columns) {\n            if (!this.formGroup.controls[column.fieldName].value) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * @return {?}\n     */\n    get isExportEnabled() {\n        if (this.isRequestPending) {\n            return false;\n        }\n        for (const column of this.columns) {\n            if (this.formGroup.controls[column.fieldName].value) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        /** @type {?} */\n        const controls = this.columns.reduce((/**\n         * @param {?} previousValue\n         * @param {?} currentValue\n         * @return {?}\n         */\n        (previousValue, currentValue) => {\n            previousValue[currentValue.fieldName] = new FormControl(true);\n            return previousValue;\n        }), {});\n        this.formGroup = new FormGroup(controls);\n    }\n    /**\n     * @private\n     * @param {?} records\n     * @return {?}\n     */\n    exportData(records) {\n        if (!this.open) {\n            return;\n        }\n        this.open = false;\n        this._isRequestPending = false;\n        /** @type {?} */\n        const rows = [\n            // First row is the display names\n            Object.keys(records[0]).map((/**\n             * @param {?} fieldName\n             * @return {?}\n             */\n            fieldName => this.getDisplayNameForField(fieldName))),\n            // Then the data\n            ...records.map((/**\n             * @param {?} rec\n             * @return {?}\n             */\n            rec => Object.keys(rec).map((/**\n             * @param {?} key\n             * @return {?}\n             */\n            key => rec[key])))),\n        ];\n        /** @type {?} */\n        const csvFile = this.csvExporterService.createCsv(rows);\n        this.csvExporterService.downloadCsvFile(csvFile, this.fileName);\n    }\n    /**\n     * @private\n     * @param {?} progress\n     * @return {?}\n     */\n    updateProgress(progress) {\n        this._progress = progress;\n    }\n    /**\n     * @private\n     * @param {?} fieldName\n     * @return {?}\n     */\n    getDisplayNameForField(fieldName) {\n        for (const column of this.columns) {\n            if (column.fieldName === fieldName) {\n                return column.displayName;\n            }\n        }\n        return fieldName;\n    }\n}\nDataExporterComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'vcd-data-exporter',\n                template: \"<clr-modal [clrModalOpen]=\\\"open\\\" (clrModalOpenChange)=\\\"openChange.emit($event)\\\" [clrModalSize]=\\\"'sm'\\\" #modal>\\n    <h3 class=\\\"modal-title\\\">{{ dialogHeader }}</h3>\\n    <div class=\\\"modal-body\\\">\\n        <button\\n            *ngIf=\\\"showSelectAll\\\"\\n            class=\\\"btn btn-sm btn-link select-all\\\"\\n            type=\\\"button\\\"\\n            (click)=\\\"onClickCheckAll()\\\"\\n            [disabled]=\\\"!isSelectAllEnabled\\\"\\n        >\\n            Select All\\n        </button>\\n        <ul class=\\\"list-unstyled column-selection\\\" [formGroup]=\\\"formGroup\\\">\\n            <li *ngFor=\\\"let col of columns\\\">\\n                <clr-checkbox-wrapper>\\n                    <input type=\\\"checkbox\\\" clrCheckbox [formControlName]=\\\"col.fieldName\\\" />\\n                    <label>{{ col.displayName }}</label>\\n                </clr-checkbox-wrapper>\\n            </li>\\n        </ul>\\n        <div class=\\\"progress\\\" [ngClass]=\\\"{ loop: progress == -1, pending: isRequestPending }\\\">\\n            <progress max=\\\"100\\\" value=\\\"{{ progress * 100 }}\\\"></progress>\\n        </div>\\n    </div>\\n    <hr />\\n\\n    <div class=\\\"modal-footer\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-outline cancel\\\" (click)=\\\"open = false\\\">\\n            Cancel\\n        </button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary export\\\" [disabled]=\\\"!isExportEnabled\\\" (click)=\\\"onClickExport()\\\">\\n            Export\\n        </button>\\n    </div>\\n</clr-modal>\\n\",\n                styles: [\"div.progress{visibility:hidden}div.progress.pending{visibility:visible}button.select-all{margin:0;padding:0}\"]\n            }] }\n];\n/** @nocollapse */\nDataExporterComponent.ctorParameters = () => [\n    { type: CsvExporterService }\n];\nDataExporterComponent.propDecorators = {\n    columns: [{ type: Input }],\n    fileName: [{ type: Input }],\n    dialogHeader: [{ type: Input }],\n    showSelectAll: [{ type: Input }],\n    open: [{ type: Input }],\n    openChange: [{ type: Output }],\n    dataExportRequest: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: data-exporter/data-exporter.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataExporterModule {\n}\nDataExporterModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [DataExporterComponent],\n                imports: [CommonModule, ReactiveFormsModule, ClarityModule],\n                exports: [DataExporterComponent],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: datagrid/interfaces/datagrid-column.interface.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n/** @enum {string} */\nconst GridColumnHideable = {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never: \"NEVER\",\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown: \"SHOWN\",\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden: \"HIDDEN\",\n};\n/** @enum {string} */\nconst GridColumnSortDirection = {\n    Asc: \"ASCENDING\",\n    Desc: \"DESCENDING\",\n    None: \"NONE\",\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: datagrid/datagrid.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {string} */\nconst GridSelectionType = {\n    /**\n     * For selecting multiple rows\n     */\n    Multi: \"MULTI\",\n    /**\n     * For selecting only one row at a time\n     */\n    Single: \"SINGLE\",\n    /**\n     * Disables the selection\n     */\n    None: \"NONE\",\n};\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n * <vcd-datagrid\n *    (onGridRefresh)=\"fetchData()\"\n *    [columns]=\"columns\"\n *    [gridData]=\"gridData\">\n *  </vcd-datagrid>\n *\n * @template R\n */\nclass DatagridComponent {\n    constructor() {\n        this.GridColumnHideable = GridColumnHideable;\n        /**\n         * The CSS class to use for the Clarity datagrid.\n         */\n        this.clrDatagridCssClass = '';\n        /**\n         * Loading indicator on the grid\n         */\n        this.isLoading = false;\n        /**\n         * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n         * {\\@link #GridState} is the type of value emitted\n         */\n        this.gridRefresh = new EventEmitter();\n    }\n    /**\n     * Sets the configuration of columns on the grid and updates the {\\@link columnsConfig} array\n     * @param {?} cols\n     * @return {?}\n     */\n    set columns(cols) {\n        this._columns = cols;\n        this.getColumnsConfig();\n    }\n    /**\n     * @return {?}\n     */\n    get columns() {\n        return this._columns;\n    }\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     * @param {?} result\n     * @return {?}\n     */\n    set gridData(result) {\n        this.isLoading = false;\n        this.items = result.items;\n    }\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     * @param {?} row\n     * @param {?} index\n     * @return {?}\n     */\n    clrDatarowCssClassGetter(row, index) {\n        return '';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.isLoading = true;\n        this.gridRefresh.emit({});\n    }\n    /**\n     * @param {?} column\n     * @return {?}\n     */\n    isColumnHideable(column) {\n        return column && column.hideable && column.hideable !== GridColumnHideable.Never;\n    }\n    /**\n     * Defines the {\\@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     * @private\n     * @return {?}\n     */\n    getColumnsConfig() {\n        this.columnsConfig = this.columns.map((/**\n         * @param {?} column\n         * @return {?}\n         */\n        column => {\n            /** @type {?} */\n            const columnConfig = Object.assign({}, column);\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = (/** @type {?} */ (column.renderer));\n            }\n            else if (((/** @type {?} */ (column.renderer))).config) {\n                columnConfig.fieldColumnRendererSpec = (/** @type {?} */ (column.renderer));\n            }\n            else {\n                columnConfig.fieldName = (/** @type {?} */ (column.renderer));\n            }\n            return columnConfig;\n        }));\n    }\n}\nDatagridComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'vcd-datagrid',\n                template: \"<clr-datagrid [clrDgLoading]=\\\"isLoading\\\" [ngClass]=\\\"this.clrDatagridCssClass\\\">\\n    <clr-dg-column *ngFor=\\\"let column of columnsConfig\\\">\\n        <ng-container *ngIf=\\\"isColumnHideable(column); else notHideable\\\">\\n            <ng-container *clrDgHideableColumn=\\\"{ hidden: column.hideable === GridColumnHideable.Hidden }\\\">{{\\n                column.displayName\\n            }}</ng-container>\\n        </ng-container>\\n        <ng-template #notHideable>{{ column.displayName }}</ng-template>\\n    </clr-dg-column>\\n\\n    <clr-dg-row *ngFor=\\\"let restItem of items; let i = index\\\" [ngClass]=\\\"this.clrDatarowCssClassGetter(restItem, i)\\\">\\n        <clr-dg-cell *ngFor=\\\"let column of columnsConfig\\\">\\n            <!-- Default renderer -->\\n            <ng-container *ngIf=\\\"column.fieldName\\\">{{ restItem | nestedProperty: column.fieldName }}</ng-container>\\n\\n            <!-- Renderer is a function -->\\n            <ng-container *ngIf=\\\"column.fieldRenderer\\\">{{\\n                restItem | functionRenderer: column.fieldRenderer\\n            }}</ng-container>\\n\\n            <!-- Renderer is a componentRenderer -->\\n            <ng-template\\n                *ngIf=\\\"column.fieldColumnRendererSpec\\\"\\n                [vcdComponentRendererOutlet]=\\\"{ rendererSpec: column.fieldColumnRendererSpec, context: restItem }\\\"\\n            >\\n            </ng-template>\\n        </clr-dg-cell>\\n    </clr-dg-row>\\n\\n    <clr-dg-footer> </clr-dg-footer>\\n</clr-datagrid>\\n\"\n            }] }\n];\nDatagridComponent.propDecorators = {\n    columns: [{ type: Input }],\n    gridData: [{ type: Input }],\n    clrDatagridCssClass: [{ type: Input }],\n    gridRefresh: [{ type: Output }],\n    numericFilter: [{ type: ViewChild, args: [ClrDatagridFilter, { static: false },] }],\n    clrDatarowCssClassGetter: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: datagrid/directives/component-renderer-outlet.directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Component that acts as a host element for dynamic rendering of component constructors.\n * It takes {\\@link ComponentRendererSpec} as input and also 'context' as input that serves as argument for\n * {\\@link ComponentRenderer.config} method. Attaches the component to be rendered to the view container of host element\n * and updates it's configuration whenever changed.\n *\n * Example usage:\n * <ng-template\n *      [vcdComponentRendererOutlet]=\"{ rendererSpec: column.fieldColumnRendererSpec, context: restItem }\"\n * ></ng-template>\n *\n * @template R, T\n */\nclass ComponentRendererOutletDirective {\n    /**\n     * @param {?} viewContainerRef\n     * @param {?} cfr\n     */\n    constructor(viewContainerRef, cfr) {\n        this.viewContainerRef = viewContainerRef;\n        this.cfr = cfr;\n    }\n    /**\n     * @param {?} renderer\n     * @return {?}\n     */\n    set vcdComponentRendererOutlet(renderer) {\n        if (this.componentType !== renderer.rendererSpec.type) {\n            // Cache the componentType to avoid redundant detaching and attaching of component to this host\n            this.componentType = renderer.rendererSpec.type;\n            this.componentRef = this.attachRenderer();\n        }\n        this.assignValue(renderer.rendererSpec.config, renderer.context);\n    }\n    /**\n     * Attaches the passed component type to the view of this directive host\n     * @private\n     * @return {?}\n     */\n    attachRenderer() {\n        if (this.componentRef) {\n            this.detachRenderer();\n        }\n        /** @type {?} */\n        const componentFactory = this.cfr.resolveComponentFactory(this.componentType);\n        return this.viewContainerRef.createComponent(componentFactory);\n    }\n    /**\n     * Updates the configuration of instantiated component\n     * @private\n     * @param {?} config\n     * @param {?} context\n     * @return {?}\n     */\n    assignValue(config, context) {\n        if (!this.componentRef || !this.componentRef.instance) {\n            return;\n        }\n        this.componentRef.instance.config = config instanceof Function ? config(context) : config;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    detachRenderer() {\n        this.viewContainerRef.remove();\n        this.componentRef = null;\n    }\n}\nComponentRendererOutletDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[vcdComponentRendererOutlet]',\n            },] }\n];\n/** @nocollapse */\nComponentRendererOutletDirective.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ComponentFactoryResolver }\n];\nComponentRendererOutletDirective.propDecorators = {\n    vcdComponentRendererOutlet: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: common/pipes/nested-property.pipe.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst OBJECT_PROPERTY_SEPARATOR = '.';\n/**\n * Used for extracting the value of nested property of an object.\n *\n * Example:\n * const obj = {\n *     a: {\n *         b: {\n *             c: 'c'\n *         }\n *     }\n * }\n *\n * Invoking `{{ obj | nestedProperty: 'a.b.c' }}` in a template produces c\n */\nclass NestedPropertyPipe {\n    /**\n     * @param {?} localeId\n     */\n    constructor(localeId) {\n        this.localeId = localeId;\n    }\n    /**\n     * @template T\n     * @param {?} item\n     * @param {?} property\n     * @return {?}\n     */\n    transform(item, property) {\n        if (!item || !property) {\n            return null;\n        }\n        /** @type {?} */\n        const splitProperty = property.split(OBJECT_PROPERTY_SEPARATOR);\n        /** @type {?} */\n        let returnValue;\n        if (splitProperty.length > 1) {\n            /** @type {?} */\n            let value = item;\n            for (const nestedProp of splitProperty) {\n                if (isNullOrUndefined(value) || isNullOrUndefined(value[nestedProp])) {\n                    return null;\n                }\n                value = value[nestedProp];\n            }\n            returnValue = value;\n        }\n        else {\n            if (isNullOrUndefined(item[property])) {\n                return null;\n            }\n            returnValue = item[property];\n        }\n        if (typeof returnValue === 'number') {\n            return new DecimalPipe(this.localeId).transform(returnValue);\n        }\n        return returnValue instanceof Date ? new DatePipe(this.localeId).transform(returnValue) : returnValue;\n    }\n}\nNestedPropertyPipe.decorators = [\n    { type: Pipe, args: [{\n                name: 'nestedProperty',\n                pure: true,\n            },] }\n];\n/** @nocollapse */\nNestedPropertyPipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\n/**\n * Utility method for covering the 'null' and 'undefined' checks as 'value == null' is equivalent to 'value === null || value === undefined'\n * @param {?} value\n * @return {?}\n */\nfunction isNullOrUndefined(value) {\n    return value == null;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: common/pipes/pipes.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst declarations = [NestedPropertyPipe];\nclass PipesModule {\n}\nPipesModule.decorators = [\n    { type: NgModule, args: [{\n                declarations,\n                exports: [...declarations],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: datagrid/pipes/function-renderer.pipe.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used for executing the functions of column cells which use functions to calculate their values from different\n * properties of an object\n */\nclass FunctionRendererPipe {\n    /**\n     * @param {?} item\n     * @param {?} renderer\n     * @return {?}\n     */\n    transform(item, renderer) {\n        if (!item || !renderer) {\n            return null;\n        }\n        return renderer(item);\n    }\n}\nFunctionRendererPipe.decorators = [\n    { type: Pipe, args: [{\n                name: 'functionRenderer',\n                pure: true,\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: datagrid/renderers/bold-text-renderer.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A {\\@link ComponentRenderer} component that is used for rendering a bold text inside a column cell template\n *\n * \\@example Example usage with RendererSpec:\n *     columns: GridColumn<MockRecord>[] = [\n *       {\n *         displayName: 'Component Renderer',\n *         renderer: RendererSpec(\n *           BoldTextRendererComponent,\n *           (record: MockRecord) => ({text: record.name})\n *         )\n *       }\n *     ];\n */\nclass BoldTextRendererComponent {\n}\nBoldTextRendererComponent.decorators = [\n    { type: Component, args: [{\n                template: `\n        <strong>{{ config.text }}</strong>\n    `\n            }] }\n];\nBoldTextRendererComponent.propDecorators = {\n    config: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: datagrid/datagrid.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst directives = [DatagridComponent, ComponentRendererOutletDirective];\n/** @type {?} */\nconst pipes = [FunctionRendererPipe];\n/** @type {?} */\nconst renderers = [BoldTextRendererComponent];\nclass DatagridModule {\n}\nDatagridModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, ClarityModule, PipesModule, ReactiveFormsModule],\n                declarations: [...directives, ...renderers, ...pipes],\n                providers: [],\n                exports: [DatagridComponent, ...renderers],\n                entryComponents: [...renderers],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: datagrid/interfaces/component-renderer.interface.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Utility function to enforce type safety on output of the config function. The output is used as value context\n * inside ComponentRenderer's template\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: RendererSpec<SomeRecord, IconRendererConfiguration>(IconComponentRendererCtor, (r: SomeRecord) => v)\n * }\n *\n * In the above example, this method helps in making sure that the value \"v\" returned by the config function is of\n * IconRendererConfiguration type\n * @template R, C\n * @param {?} componentRendererSpec\n * @return {?}\n */\nfunction RendererSpec(componentRendererSpec) {\n    return componentRendererSpec;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: cliptext/cliptext.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {string} */\nconst Position = {\n    TOP: \"TOP\",\n    BOTTOM: \"BOTTOM\",\n    BEFORE: \"BEFORE\",\n    AFTER: \"AFTER\",\n};\n/**\n * Use a cliptext component when you need to restrict a displayed text to a certain width but still provide to the user\n * the ability to see the full text if it is clipped along with a hint that clipping has taken place. Accessibility\n * should be taken into account.\n *\n * Example: a datagrid with a cell that contains text that cannot fit in one line. The solution is to wrap the content\n * on multiple lines or show as much text as it can fit in one line, showing ellipses ('...') at the end to denote that\n * there is still more content and on hover over to display the full content.\n *\n * The current implementation is based on clarity tooltip component, where the tooltip is available only\n * if clipping has occurred.\n */\nclass CliptextComponent {\n    /**\n     * @param {?} changeDetector\n     */\n    constructor(changeDetector) {\n        this.changeDetector = changeDetector;\n        this._inline = false;\n        this._size = 'md';\n        this._tooltipPosition = 'top-right';\n    }\n    /**\n     * Setting the position should be avoided as much as possible and considered ONLY in extremely corner case.\n     * Some of the reasons to avoid it are:\n     *  - Clarity will introduce smart positioning '[NG] Smart Popover Component #2923'\n     *  - Future versions may go with different implementation so position may become irrelevant\n     * @param {?} position\n     * @return {?}\n     */\n    set position(position) {\n        switch (position) {\n            // Since we use only LTR languages, the mapping is:\n            // BEFORE->left, AFTER->right, default->'top-right'\n            // If we introduce RTL languages the mapping should be:\n            // BEFORE->right, AFTER->left, default->'top-left'\n            case Position.TOP:\n                this._tooltipPosition = 'top-right';\n                break;\n            case Position.BOTTOM:\n                this._tooltipPosition = 'bottom-right';\n                break;\n            case Position.BEFORE:\n                this._tooltipPosition = 'left';\n                break;\n            case Position.AFTER:\n                this._tooltipPosition = 'right';\n                break;\n            default:\n                this._tooltipPosition = 'top-right';\n        }\n    }\n    /**\n     * Whether the tooltip should take up a block, or be inline within text\n     *\n     * If its value is falsy (default), it will be displayed as a block (take up the parent's width).\n     * Otherwise, it should be a CSS string to be used as its max-width;\n     * @param {?} width\n     * @return {?}\n     */\n    set inlineWidth(width) {\n        this._inline = width;\n    }\n    /**\n     * @return {?}\n     */\n    get isInline() {\n        return !!this._inline;\n    }\n    /**\n     * @return {?}\n     */\n    get maxWidth() {\n        return this._inline || '';\n    }\n    /**\n     * Same as Clarity tooltip sizes (xs, sm, md, lg) but currently only the default one (md) is used\n     * @return {?}\n     */\n    get size() {\n        return this._size;\n    }\n    /**\n     * @return {?}\n     */\n    get tooltipPosition() {\n        return this._tooltipPosition;\n    }\n    /**\n     * @return {?}\n     */\n    get tooltipText() {\n        return this._tooltipText;\n    }\n    /**\n     * @param {?} tooltipContent\n     * @return {?}\n     */\n    set tooltipContent(tooltipContent) {\n        if (!tooltipContent) {\n            return;\n        }\n        if (!this.isOverflowing()) {\n            this.clrIfOpen.open = false;\n        }\n        else {\n            // Check if the tooltip text has changed\n            /** @type {?} */\n            const tooltipText = this.cliptextContainer.nativeElement.textContent;\n            if (this._tooltipText !== tooltipText) {\n                this._tooltipText = tooltipText;\n                // Re-trigger open so that clarity tooltip is positioned correctly\n                this.clrIfOpen.open = false;\n                this.clrIfOpen.open = true;\n                this.changeDetector.detectChanges();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this._tooltipText = this.cliptextContainer.nativeElement.textContent;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    isOverflowing() {\n        return isTextOverflowing(this.cliptextContainer.nativeElement);\n        // Text overflows when the content element's width is less than its scrollWidth.\n        /**\n         * @param {?} el\n         * @return {?}\n         */\n        function isTextOverflowing(el) {\n            return Math.ceil(el.getBoundingClientRect().width) < el.scrollWidth;\n        }\n    }\n}\nCliptextComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'vcd-cliptext',\n                template: \"<clr-tooltip>\\n    <div #cliptextContainer clrTooltipTrigger class=\\\"cliptext-container text-truncate\\\" [ngClass]=\\\"{ inline: isInline }\\\">\\n        <ng-content></ng-content>\\n    </div>\\n    <clr-tooltip-content aria-hidden=\\\"true\\\" *clrIfOpen [clrPosition]=\\\"tooltipPosition\\\" [clrSize]=\\\"size\\\">\\n        <span>{{ tooltipText }}</span>\\n    </clr-tooltip-content>\\n</clr-tooltip>\\n\",\n                styles: [\":host(.inline){display:inline-block;vertical-align:middle}clr-tooltip{display:block}clr-tooltip .text-truncate{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}\"]\n            }] }\n];\n/** @nocollapse */\nCliptextComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\nCliptextComponent.propDecorators = {\n    position: [{ type: Input }],\n    inlineWidth: [{ type: Input }],\n    isInline: [{ type: HostBinding, args: ['class.inline',] }],\n    maxWidth: [{ type: HostBinding, args: ['style.maxWidth',] }],\n    cliptextContainer: [{ type: ViewChild, args: ['cliptextContainer', { static: true },] }],\n    clrIfOpen: [{ type: ViewChild, args: [ClrIfOpen, { static: true },] }],\n    tooltipContent: [{ type: ViewChild, args: [ClrTooltipContent, { static: false },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: cliptext/cliptext.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CliptextModule {\n}\nCliptextModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [CliptextComponent],\n                exports: [CliptextComponent],\n                imports: [CommonModule, ClarityModule],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: components.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ComponentsModule {\n}\nComponentsModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [DataExporterModule, DatagridModule, CliptextModule],\n                exports: [DataExporterModule, DatagridModule, CliptextModule],\n            },] }\n];\n\nexport { BoldTextRendererComponent, CliptextComponent, CliptextModule, ComponentsModule, DataExporterComponent, DataExporterModule, DatagridComponent, DatagridModule, GridColumnHideable, GridColumnSortDirection, GridSelectionType, Position, RendererSpec, DataExporterModule as ɵa, DataExporterComponent as ɵb, CsvExporterService as ɵc, DatagridModule as ɵd, PipesModule as ɵe, NestedPropertyPipe as ɵf, DatagridComponent as ɵg, ComponentRendererOutletDirective as ɵh, BoldTextRendererComponent as ɵi, FunctionRendererPipe as ɵj, CliptextModule as ɵk, CliptextComponent as ɵl };\n//# sourceMappingURL=vcd-ui-components.js.map\n","<clr-modal [clrModalOpen]=\"open\" (clrModalOpenChange)=\"openChange.emit($event)\" [clrModalSize]=\"'sm'\" #modal>\n    <h3 class=\"modal-title\">{{ dialogHeader }}</h3>\n    <div class=\"modal-body\">\n        <button\n            *ngIf=\"showSelectAll\"\n            class=\"btn btn-sm btn-link select-all\"\n            type=\"button\"\n            (click)=\"onClickCheckAll()\"\n            [disabled]=\"!isSelectAllEnabled\"\n        >\n            Select All\n        </button>\n        <ul class=\"list-unstyled column-selection\" [formGroup]=\"formGroup\">\n            <li *ngFor=\"let col of columns\">\n                <clr-checkbox-wrapper>\n                    <input type=\"checkbox\" clrCheckbox [formControlName]=\"col.fieldName\" />\n                    <label>{{ col.displayName }}</label>\n                </clr-checkbox-wrapper>\n            </li>\n        </ul>\n        <div class=\"progress\" [ngClass]=\"{ loop: progress == -1, pending: isRequestPending }\">\n            <progress max=\"100\" value=\"{{ progress * 100 }}\"></progress>\n        </div>\n    </div>\n    <hr />\n\n    <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-outline cancel\" (click)=\"open = false\">\n            Cancel\n        </button>\n        <button type=\"button\" class=\"btn btn-primary export\" [disabled]=\"!isExportEnabled\" (click)=\"onClickExport()\">\n            Export\n        </button>\n    </div>\n</clr-modal>\n","<clr-datagrid [clrDgLoading]=\"isLoading\" [ngClass]=\"this.clrDatagridCssClass\">\n    <clr-dg-column *ngFor=\"let column of columnsConfig\">\n        <ng-container *ngIf=\"isColumnHideable(column); else notHideable\">\n            <ng-container *clrDgHideableColumn=\"{ hidden: column.hideable === GridColumnHideable.Hidden }\">{{\n                column.displayName\n            }}</ng-container>\n        </ng-container>\n        <ng-template #notHideable>{{ column.displayName }}</ng-template>\n    </clr-dg-column>\n\n    <clr-dg-row *ngFor=\"let restItem of items; let i = index\" [ngClass]=\"this.clrDatarowCssClassGetter(restItem, i)\">\n        <clr-dg-cell *ngFor=\"let column of columnsConfig\">\n            <!-- Default renderer -->\n            <ng-container *ngIf=\"column.fieldName\">{{ restItem | nestedProperty: column.fieldName }}</ng-container>\n\n            <!-- Renderer is a function -->\n            <ng-container *ngIf=\"column.fieldRenderer\">{{\n                restItem | functionRenderer: column.fieldRenderer\n            }}</ng-container>\n\n            <!-- Renderer is a componentRenderer -->\n            <ng-template\n                *ngIf=\"column.fieldColumnRendererSpec\"\n                [vcdComponentRendererOutlet]=\"{ rendererSpec: column.fieldColumnRendererSpec, context: restItem }\"\n            >\n            </ng-template>\n        </clr-dg-cell>\n    </clr-dg-row>\n\n    <clr-dg-footer> </clr-dg-footer>\n</clr-datagrid>\n","\n        <strong>{{ config.text }}</strong>\n    ","<clr-tooltip>\n    <div #cliptextContainer clrTooltipTrigger class=\"cliptext-container text-truncate\" [ngClass]=\"{ inline: isInline }\">\n        <ng-content></ng-content>\n    </div>\n    <clr-tooltip-content aria-hidden=\"true\" *clrIfOpen [clrPosition]=\"tooltipPosition\" [clrSize]=\"size\">\n        <span>{{ tooltipText }}</span>\n    </clr-tooltip-content>\n</clr-tooltip>\n","import { Component, Injectable, ɵɵdefineInjectable, Input, NgModule, ComponentFactoryResolver, ViewChild, ViewContainerRef, InjectionToken } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-typescript';\nimport 'prismjs/components/prism-scss';\nimport { ClarityModule } from '@clr/angular';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: documentation-retriever.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Service exposing methods for retrieving the documentation for a given component.\n * @abstract\n */\nclass DocumentationRetrieverService {\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: documentation-container/documentation-container.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DocumentationContainerComponent {\n    /**\n     * @param {?} route\n     */\n    constructor(route) {\n        this.route = route;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.route.data.subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        (data) => {\n            this.documentationEntry = data.documentationEntry;\n        }));\n    }\n}\nDocumentationContainerComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'vcd-documentation-container',\n                template: \"<clr-tabs>\\n    <clr-tab>\\n        <button clrTabLink>Documentation</button>\\n        <clr-tab-content>\\n            <vcd-overview-viewer [component]=\\\"documentationEntry?.component\\\"> </vcd-overview-viewer>\\n        </clr-tab-content>\\n    </clr-tab>\\n\\n    <clr-tab>\\n        <button clrTabLink>API</button>\\n        <clr-tab-content>\\n            <vcd-api-viewer [component]=\\\"documentationEntry?.component\\\"> </vcd-api-viewer>\\n        </clr-tab-content>\\n    </clr-tab>\\n\\n    <clr-tab>\\n        <button clrTabLink>Examples</button>\\n        <clr-tab-content>\\n            <vcd-example-viewer\\n                *ngFor=\\\"let exampleDescriptor of documentationEntry?.examples\\\"\\n                [exampleEntry]=\\\"exampleDescriptor\\\"\\n            >\\n            </vcd-example-viewer>\\n        </clr-tab-content>\\n    </clr-tab>\\n</clr-tabs>\\n\",\n                styles: [\"vcd-example-viewer{margin-top:1rem;display:block}\"]\n            }] }\n];\n/** @nocollapse */\nDocumentationContainerComponent.ctorParameters = () => [\n    { type: ActivatedRoute }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: documentation.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * To register a documentation entry as value for corresponding component\n * @type {?}\n */\nconst documentationEntryMap = new Map();\n/**\n * Used in {\\@link Documentation.registerDocumentationEntry} method to check if the input is a valid {\\@link DocumentationEntry}\n * @param {?} documentationParams\n * @return {?}\n */\nfunction validateDocumentationMetadata(documentationParams) {\n    if (!documentationParams.urlSegment) {\n        throw new Error('urlSegment should be specified and not empty');\n    }\n    /** @type {?} */\n    const documentationEntry = Documentation.getAllEntries().find((/**\n     * @param {?} entry\n     * @return {?}\n     */\n    entry => entry.urlSegment === documentationParams.urlSegment));\n    if (documentationEntry) {\n        throw new Error(`The specified urlSegment '${documentationParams.urlSegment}' for '${documentationParams.displayName}'` +\n            `was already defined for '${documentationEntry.displayName}'`);\n    }\n    if (!documentationParams.displayName) {\n        throw new Error('displayName should be specified and not empty');\n    }\n}\n/** @type {?} */\nconst Documentation = {\n    /**\n     * Returns all the documentation entries registered into the framework\n     * @return {?}\n     */\n    getAllEntries() {\n        return Array.from(documentationEntryMap.values());\n    },\n    /**\n     * Returns angular routes used when displaying the documentation/examples for the components.\n     * @return {?}\n     */\n    getRoutes() {\n        return Documentation.getAllEntries().map((/**\n         * @param {?} documentationEntry\n         * @return {?}\n         */\n        (documentationEntry) => ({\n            path: documentationEntry.urlSegment,\n            component: DocumentationContainerComponent,\n            data: { documentationEntry },\n        })));\n    },\n    /**\n     * Used for manual registration of documentation entry with a corresponding component.\n     * @param {?} documentationEntry\n     * @return {?}\n     */\n    registerDocumentationEntry(documentationEntry) {\n        validateDocumentationMetadata(documentationEntry);\n        documentationEntryMap.set(documentationEntry.component, documentationEntry);\n    },\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: compodoc/compodoc-retriever.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n/**\n * This service retrieves specific properties from compodoc generated documentation\n */\nclass CompoDocRetrieverService {\n    /**\n     * @param {?} documentationJson\n     */\n    constructor(documentationJson) {\n        this.documentationJson = documentationJson;\n    }\n    /**\n     * @param {?} component\n     * @return {?}\n     */\n    getOverview(component) {\n        return this.getComponent(component).description;\n    }\n    /**\n     * @param {?} component\n     * @return {?}\n     */\n    getTypescriptSourceCode(component) {\n        return this.getComponent(component).sourceCode;\n    }\n    /**\n     * @param {?} component\n     * @return {?}\n     */\n    getHtmlSourceCode(component) {\n        return this.getComponent(component).templateData;\n    }\n    /**\n     * @param {?} component\n     * @return {?}\n     */\n    getCssSourceCode(component) {\n        /** @type {?} */\n        const styleUrlsData = this.getComponent(component).styleUrlsData;\n        if (!styleUrlsData) {\n            return;\n        }\n        return styleUrlsData.map((/**\n         * @param {?} styleUrl\n         * @return {?}\n         */\n        styleUrl => styleUrl.data)).join('\\n\\n\\n');\n    }\n    /**\n     * @private\n     * @param {?} component\n     * @return {?}\n     */\n    getComponent(component) {\n        for (const documentationJson of this.documentationJson) {\n            /** @type {?} */\n            const compodocComponent = documentationJson.components.find((/**\n             * @param {?} c\n             * @return {?}\n             */\n            c => c.name === component.name));\n            if (compodocComponent) {\n                return compodocComponent;\n            }\n        }\n        return (/** @type {?} */ ({ styleUrlsData: [] }));\n    }\n    /**\n     * @param {?} component\n     * @return {?}\n     */\n    getInputParameters(component) {\n        /** @type {?} */\n        const comp = this.getComponent(component);\n        return comp.inputsClass || [];\n    }\n    /**\n     * @param {?} component\n     * @return {?}\n     */\n    getOutputParameters(component) {\n        /** @type {?} */\n        const comp = this.getComponent(component);\n        return comp.outputsClass || [];\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: highlight/highlight.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass HighlightService {\n}\nHighlightService.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */ HighlightService.ngInjectableDef = ɵɵdefineInjectable({ factory: function HighlightService_Factory() { return new HighlightService(); }, token: HighlightService, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * Generated from: highlight/prism/prism-highlight.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass PrismHighlightService extends HighlightService {\n    /**\n     * @param {?} code\n     * @return {?}\n     */\n    highlightTypescript(code) {\n        return this.highlight(code, Prism.languages.typescript);\n    }\n    /**\n     * @param {?} code\n     * @return {?}\n     */\n    highlightHtml(code) {\n        return this.highlight(code, Prism.languages.html);\n    }\n    /**\n     * @param {?} code\n     * @return {?}\n     */\n    highlightScss(code) {\n        return this.highlight(code, Prism.languages.scss);\n    }\n    /**\n     * @private\n     * @param {?} code\n     * @param {?} lang\n     * @return {?}\n     */\n    highlight(code, lang) {\n        return Prism.highlight(code || '', lang);\n    }\n}\nPrismHighlightService.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: overview-viewer/overview-viewer.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass OverviewViewerComponent {\n    /**\n     * @param {?} documentationRetriever\n     */\n    constructor(documentationRetriever) {\n        this.documentationRetriever = documentationRetriever;\n        this.isNoOverviewMessageShown = true;\n    }\n    /**\n     * @param {?} component\n     * @return {?}\n     */\n    set component(component) {\n        if (!component) {\n            return;\n        }\n        // TODO: externalize string literals\n        this.overview =\n            this.documentationRetriever.getOverview(component) ||\n                (this.isNoOverviewMessageShown ? 'No Documentation found' : '');\n    }\n}\nOverviewViewerComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'vcd-overview-viewer',\n                template: \"<div [innerHTML]=\\\"overview\\\"></div>\\n\",\n                styles: [\"\"]\n            }] }\n];\n/** @nocollapse */\nOverviewViewerComponent.ctorParameters = () => [\n    { type: DocumentationRetrieverService }\n];\nOverviewViewerComponent.propDecorators = {\n    isNoOverviewMessageShown: [{ type: Input }],\n    component: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: overview-viewer/overview-viewer.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst declarations = [OverviewViewerComponent];\nclass OverviewViewerModule {\n}\nOverviewViewerModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [ClarityModule, CommonModule],\n                declarations: [...declarations],\n                exports: [...declarations],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: example-viewer/example-viewer.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ExampleViewerComponent {\n    /**\n     * @param {?} resolver\n     */\n    constructor(resolver) {\n        this.resolver = resolver;\n        /**\n         * For showing and hiding of {\\@link SourceCodeViewerComponent} in the HTML\n         */\n        this.showSourceCode = false;\n    }\n    /**\n     * @param {?} exampleEntry\n     * @return {?}\n     */\n    set exampleEntry(exampleEntry) {\n        this._exampleEntry = exampleEntry;\n        this.createExample();\n    }\n    /**\n     * @return {?}\n     */\n    get exampleEntry() {\n        return this._exampleEntry;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    createExample() {\n        this.exampleContainer.clear();\n        /** @type {?} */\n        const exampleEntry = this.exampleEntry;\n        if (!exampleEntry || !exampleEntry.component) {\n            return;\n        }\n        /** @type {?} */\n        const factory = this.resolver.resolveComponentFactory(exampleEntry.component);\n        this.exampleContainer.createComponent(factory);\n    }\n}\nExampleViewerComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'vcd-example-viewer',\n                template: \"<div class=\\\"card\\\">\\n    <div class=\\\"card-header-main\\\">\\n        <div class=\\\"card-header\\\">\\n            {{ exampleEntry?.title }}\\n        </div>\\n        <div class=\\\"example-button-container\\\" [ngClass]=\\\"{ 'example-shown': showSourceCode }\\\">\\n            <clr-icon shape=\\\"code\\\" size=\\\"32\\\" (click)=\\\"showSourceCode = !showSourceCode\\\"> </clr-icon>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"card-block source-code-container\\\" *ngIf=\\\"showSourceCode\\\">\\n        <vcd-source-code-viewer [component]=\\\"exampleEntry?.component\\\"> </vcd-source-code-viewer>\\n    </div>\\n    <div class=\\\"card-block\\\">\\n        <div class=\\\"card-text\\\">\\n            <vcd-overview-viewer\\n                [isNoOverviewMessageShown]=\\\"false\\\"\\n                [component]=\\\"exampleEntry?.component\\\"\\n            ></vcd-overview-viewer>\\n            <template #exampleContainer> </template>\\n        </div>\\n    </div>\\n</div>\\n\",\n                styles: [\".card-header-main{display:flex}.card-header-main .card-header{flex:1}.card-header-main .example-button-container{display:flex;margin:.5rem .5rem 0 0}.card-header-main .example-button-container.example-shown{border-radius:3px 3px 0 0;background-color:#d8e3e9}.card-header-main .example-button-container clr-icon{-ms-grid-row-align:center;align-self:center}.source-code-container{border-radius:3px 0 3px 3px;background-color:#d8e3e9;margin:0 .5rem}:host ::ng-deep vcd-overview-viewer>div>p{margin-bottom:10px}\"]\n            }] }\n];\n/** @nocollapse */\nExampleViewerComponent.ctorParameters = () => [\n    { type: ComponentFactoryResolver }\n];\nExampleViewerComponent.propDecorators = {\n    exampleEntry: [{ type: Input }],\n    exampleContainer: [{ type: ViewChild, args: ['exampleContainer', { static: true, read: ViewContainerRef },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: source-code-viewer/source-code-viewer.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * To display the 3 code parts(TypeScript, HTML and CSS) of a component\n */\nclass SourceCodeViewerComponent {\n    /**\n     * @param {?} documentationRetriever\n     * @param {?} highlightService\n     */\n    constructor(documentationRetriever, highlightService) {\n        this.documentationRetriever = documentationRetriever;\n        this.highlightService = highlightService;\n    }\n    /**\n     * The component which source (typescript, html, css) will be displayed\n     * @param {?} component\n     * @return {?}\n     */\n    set component(component) {\n        if (!component) {\n            return;\n        }\n        // TODO: externalize string literals\n        this.typescriptSourceCode = this.highlightService.highlightTypescript(this.documentationRetriever.getTypescriptSourceCode(component));\n        this.htmlSourceCode = this.highlightService.highlightHtml(this.documentationRetriever.getHtmlSourceCode(component) || 'No html found');\n        this.cssSourceCode = this.highlightService.highlightScss(this.documentationRetriever.getCssSourceCode(component) || 'No CSS found');\n    }\n}\nSourceCodeViewerComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'vcd-source-code-viewer',\n                template: \"<clr-tabs>\\n    <clr-tab>\\n        <button clrTabLink>Typescript</button>\\n        <clr-tab-content>\\n            <pre class=\\\"language-ts\\\"><code [innerHTML]=\\\"typescriptSourceCode\\\"></code></pre>\\n        </clr-tab-content>\\n    </clr-tab>\\n\\n    <clr-tab>\\n        <button clrTabLink>HTML</button>\\n        <clr-tab-content>\\n            <pre class=\\\"language-html\\\"><code [innerHTML]=\\\"htmlSourceCode\\\"></code></pre>\\n        </clr-tab-content>\\n    </clr-tab>\\n\\n    <clr-tab>\\n        <button clrTabLink>CSS</button>\\n        <clr-tab-content>\\n            <pre class=\\\"language-scss\\\"><code [innerHTML]=\\\"cssSourceCode\\\"></code></pre>\\n        </clr-tab-content>\\n    </clr-tab>\\n</clr-tabs>\\n\",\n                styles: [\"pre{height:15rem;max-height:15rem;border-radius:3px}\"]\n            }] }\n];\n/** @nocollapse */\nSourceCodeViewerComponent.ctorParameters = () => [\n    { type: DocumentationRetrieverService },\n    { type: HighlightService }\n];\nSourceCodeViewerComponent.propDecorators = {\n    component: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: source-code-viewer/source-code-viewer.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst declarations$1 = [SourceCodeViewerComponent];\nclass SourceCodeViewerModule {\n}\nSourceCodeViewerModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [ClarityModule, CommonModule],\n                declarations: [...declarations$1],\n                exports: [...declarations$1],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: example-viewer/example-viewer.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst declarations$2 = [ExampleViewerComponent];\nclass ExampleViewerModule {\n}\nExampleViewerModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [ClarityModule, CommonModule, SourceCodeViewerModule, OverviewViewerModule],\n                declarations: [...declarations$2],\n                exports: [...declarations$2],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: api-viewer/api-viewer.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ApiViewerComponent {\n    /**\n     * @param {?} documentationRetriever\n     */\n    constructor(documentationRetriever) {\n        this.documentationRetriever = documentationRetriever;\n    }\n    /**\n     * Gets the input and output parameters from the Compodoc generated documentation json\n     * @param {?} component\n     * @return {?}\n     */\n    set component(component) {\n        if (!component) {\n            return;\n        }\n        this.inputParameters = this.documentationRetriever.getInputParameters(component);\n        this.outputParameters = this.documentationRetriever.getOutputParameters(component);\n    }\n}\nApiViewerComponent.decorators = [\n    { type: Component, args: [{\n                selector: ' vcd-api-viewer',\n                template: \"<h6>Inputs</h6>\\n<table class=\\\"table\\\" *ngIf=\\\"inputParameters?.length\\\">\\n    <thead>\\n        <tr>\\n            <th class=\\\"left\\\">Name</th>\\n            <th>Type</th>\\n            <th class=\\\"left\\\">Description</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr *ngFor=\\\"let par of inputParameters\\\">\\n            <td class=\\\"left\\\">\\n                <p>{{ par.name }}</p>\\n            </td>\\n            <td>{{ par.type }}</td>\\n            <td class=\\\"left\\\"><div [innerHTML]=\\\"par.description\\\"></div></td>\\n        </tr>\\n    </tbody>\\n</table>\\n<p *ngIf=\\\"!inputParameters?.length\\\">The component has no input parameters</p>\\n\\n<h6>Outputs</h6>\\n<table class=\\\"table\\\" *ngIf=\\\"outputParameters?.length\\\">\\n    <thead>\\n        <tr>\\n            <th class=\\\"left\\\">Name</th>\\n            <th>Type</th>\\n            <th class=\\\"left\\\">Description</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr *ngFor=\\\"let par of outputParameters\\\">\\n            <td class=\\\"left\\\">\\n                <p>{{ par.name }}</p>\\n            </td>\\n            <td>{{ par.type }}</td>\\n            <td class=\\\"left\\\"><div [innerHTML]=\\\"par.description\\\"></div></td>\\n        </tr>\\n    </tbody>\\n</table>\\n<p *ngIf=\\\"!outputParameters?.length\\\">The component does not emit any values</p>\\n\",\n                styles: [\"::ng-deep body p{margin-top:0}\"]\n            }] }\n];\n/** @nocollapse */\nApiViewerComponent.ctorParameters = () => [\n    { type: DocumentationRetrieverService }\n];\nApiViewerComponent.propDecorators = {\n    component: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: api-viewer/api-viewer.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst declarations$3 = [ApiViewerComponent];\nclass ApiViewerModule {\n}\nApiViewerModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [ClarityModule, CommonModule],\n                declarations: [...declarations$3],\n                exports: [...declarations$3],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: documentation-container/documentation-container.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst declarations$4 = [DocumentationContainerComponent];\nclass DocumentationContainerModule {\n}\nDocumentationContainerModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [ClarityModule, CommonModule, OverviewViewerModule, ApiViewerModule, ExampleViewerModule],\n                declarations: [...declarations$4],\n                entryComponents: [DocumentationContainerComponent],\n                exports: [...declarations$4, OverviewViewerModule, ApiViewerModule, ExampleViewerModule],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: doc-lib.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst declarations$5 = [];\n/**\n * Token that makes the documentation jsons available to the following factory function.\n * @type {?}\n */\nconst FOR_ROOT_DOCUMENTATIONS_TOKEN = new InjectionToken('DocLibModule.forRoot() CompoDocRetrieverService doc jsons.');\n/**\n * @param {?} documentations\n * @return {?}\n */\nfunction getCompoDocRetrieverService(documentations) {\n    return new CompoDocRetrieverService(documentations);\n}\nclass DocLibModule {\n    /**\n     * Called in the host package importing this doc library for providing the documentation JSONs needed for\n     * {\\@link CompoDocRetrieverService}\n     * @param {?} documentations\n     * @return {?}\n     */\n    static forRoot(documentations) {\n        return {\n            ngModule: DocLibModule,\n            providers: [\n                // For injecting 'documentations' into factory function, we have to first provide them as injectable.\n                {\n                    provide: FOR_ROOT_DOCUMENTATIONS_TOKEN,\n                    useValue: documentations,\n                },\n                {\n                    provide: DocumentationRetrieverService,\n                    useFactory: getCompoDocRetrieverService,\n                    deps: [FOR_ROOT_DOCUMENTATIONS_TOKEN],\n                },\n            ],\n        };\n    }\n}\nDocLibModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [DocumentationContainerModule],\n                declarations: [...declarations$5],\n                exports: [...declarations$5, DocumentationContainerModule],\n                providers: [{ provide: HighlightService, useClass: PrismHighlightService }],\n            },] }\n];\n\nexport { ApiViewerComponent, DocLibModule, Documentation, DocumentationContainerComponent, DocumentationRetrieverService, ExampleViewerComponent, FOR_ROOT_DOCUMENTATIONS_TOKEN, OverviewViewerComponent, PrismHighlightService, SourceCodeViewerComponent, getCompoDocRetrieverService, CompoDocRetrieverService as ɵa, DocumentationContainerModule as ɵc, OverviewViewerModule as ɵd, OverviewViewerComponent as ɵe, ApiViewerModule as ɵf, ApiViewerComponent as ɵg, ExampleViewerModule as ɵh, SourceCodeViewerModule as ɵi, SourceCodeViewerComponent as ɵj, HighlightService as ɵk, ExampleViewerComponent as ɵl, DocumentationContainerComponent as ɵm, PrismHighlightService as ɵn };\n//# sourceMappingURL=vcd-ui-doc-lib.js.map\n","<div [innerHTML]=\"overview\"></div>\n","<h6>Inputs</h6>\n<table class=\"table\" *ngIf=\"inputParameters?.length\">\n    <thead>\n        <tr>\n            <th class=\"left\">Name</th>\n            <th>Type</th>\n            <th class=\"left\">Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let par of inputParameters\">\n            <td class=\"left\">\n                <p>{{ par.name }}</p>\n            </td>\n            <td>{{ par.type }}</td>\n            <td class=\"left\"><div [innerHTML]=\"par.description\"></div></td>\n        </tr>\n    </tbody>\n</table>\n<p *ngIf=\"!inputParameters?.length\">The component has no input parameters</p>\n\n<h6>Outputs</h6>\n<table class=\"table\" *ngIf=\"outputParameters?.length\">\n    <thead>\n        <tr>\n            <th class=\"left\">Name</th>\n            <th>Type</th>\n            <th class=\"left\">Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let par of outputParameters\">\n            <td class=\"left\">\n                <p>{{ par.name }}</p>\n            </td>\n            <td>{{ par.type }}</td>\n            <td class=\"left\"><div [innerHTML]=\"par.description\"></div></td>\n        </tr>\n    </tbody>\n</table>\n<p *ngIf=\"!outputParameters?.length\">The component does not emit any values</p>\n","<clr-tabs>\n    <clr-tab>\n        <button clrTabLink>Typescript</button>\n        <clr-tab-content>\n            <pre class=\"language-ts\"><code [innerHTML]=\"typescriptSourceCode\"></code></pre>\n        </clr-tab-content>\n    </clr-tab>\n\n    <clr-tab>\n        <button clrTabLink>HTML</button>\n        <clr-tab-content>\n            <pre class=\"language-html\"><code [innerHTML]=\"htmlSourceCode\"></code></pre>\n        </clr-tab-content>\n    </clr-tab>\n\n    <clr-tab>\n        <button clrTabLink>CSS</button>\n        <clr-tab-content>\n            <pre class=\"language-scss\"><code [innerHTML]=\"cssSourceCode\"></code></pre>\n        </clr-tab-content>\n    </clr-tab>\n</clr-tabs>\n","<div class=\"card\">\n    <div class=\"card-header-main\">\n        <div class=\"card-header\">\n            {{ exampleEntry?.title }}\n        </div>\n        <div class=\"example-button-container\" [ngClass]=\"{ 'example-shown': showSourceCode }\">\n            <clr-icon shape=\"code\" size=\"32\" (click)=\"showSourceCode = !showSourceCode\"> </clr-icon>\n        </div>\n    </div>\n\n    <div class=\"card-block source-code-container\" *ngIf=\"showSourceCode\">\n        <vcd-source-code-viewer [component]=\"exampleEntry?.component\"> </vcd-source-code-viewer>\n    </div>\n    <div class=\"card-block\">\n        <div class=\"card-text\">\n            <vcd-overview-viewer\n                [isNoOverviewMessageShown]=\"false\"\n                [component]=\"exampleEntry?.component\"\n            ></vcd-overview-viewer>\n            <template #exampleContainer> </template>\n        </div>\n    </div>\n</div>\n","<clr-tabs>\n    <clr-tab>\n        <button clrTabLink>Documentation</button>\n        <clr-tab-content>\n            <vcd-overview-viewer [component]=\"documentationEntry?.component\"> </vcd-overview-viewer>\n        </clr-tab-content>\n    </clr-tab>\n\n    <clr-tab>\n        <button clrTabLink>API</button>\n        <clr-tab-content>\n            <vcd-api-viewer [component]=\"documentationEntry?.component\"> </vcd-api-viewer>\n        </clr-tab-content>\n    </clr-tab>\n\n    <clr-tab>\n        <button clrTabLink>Examples</button>\n        <clr-tab-content>\n            <vcd-example-viewer\n                *ngFor=\"let exampleDescriptor of documentationEntry?.examples\"\n                [exampleEntry]=\"exampleDescriptor\"\n            >\n            </vcd-example-viewer>\n        </clr-tab-content>\n    </clr-tab>\n</clr-tabs>\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n    imports: [RouterModule.forRoot([])],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","<clr-main-container>\n    <clr-header class=\"header-6\">\n        <div class=\"branding\">\n            <a routerLink=\"/\" class=\"nav-nlink\">\n                <clr-icon shape=\"vm-bug\"></clr-icon>\n                <span class=\"title\">VMware VCD Common Components</span>\n            </a>\n        </div>\n    </clr-header>\n\n    <div class=\"content-container\">\n        <nav class=\"sidenav\" [clr-nav-level]=\"2\">\n            <section class=\"sidenav-content\">\n                <section class=\"nav-group\">\n                    <label>Components</label>\n                    <ul class=\"nav-list\">\n                        <ng-container *ngFor=\"let entry of sideNavEntries\">\n                            <li>\n                                <a class=\"nav-link\" [routerLink]=\"entry.path\" [routerLinkActive]=\"['active']\">\n                                    {{ entry.title }}\n                                </a>\n                            </li>\n                        </ng-container>\n                    </ul>\n                </section>\n            </section>\n        </nav>\n\n        <main class=\"content-area\">\n            <router-outlet></router-outlet>\n        </main>\n    </div>\n</clr-main-container>\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component } from '@angular/core';\nimport { Documentation, DocumentationEntry } from '@vcd/ui-doc-lib';\nimport { Router } from '@angular/router';\n\ninterface SideNavEntries {\n    title: string;\n    path: string;\n}\n\n@Component({\n    selector: 'vcd-examples-app',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n    /**\n     * Gets the registered documentation entries {@link Documentation.getAllEntries} and sets them on a array to display\n     * on the side navigation\n     */\n    sideNavEntries: SideNavEntries[] = Documentation.getAllEntries().map((entry: DocumentationEntry) => ({\n        title: entry.displayName,\n        path: entry.urlSegment,\n    }));\n\n    constructor(router: Router) {\n        /**\n         * Gets the Angular routes to be navigated in the app components's router outlet\n         * Loading the routes in {@link AppRoutingModule} is causing the following error: ERROR in Cannot read property\n         * 'loadChildren' of undefined https://stackoverflow.com/questions/44233195/dynamically-adding-routes-in-angular\n         * TODO: https://jira.eng.vmware.com/browse/VDUCC-72\n         */\n        router.resetConfig(Documentation.getRoutes());\n    }\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { BrowserModule } from '@angular/platform-browser';\nimport { LOCALE_ID, NgModule } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { DocLibModule } from '@vcd/ui-doc-lib';\nimport { ClarityModule } from '@clr/angular';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { registerLocaleData } from '@angular/common';\nimport { CliptexExamplesModule } from '../components/cliptext/cliptext.examples.module';\nimport componentsDocumentationJson from '../../gen/components-compodoc-documentation/documentation.json';\nimport examplesDocumentationJson from '../../gen/examples-compodoc-documentation/documentation.json';\nimport { DatagridExamplesModule } from '../components/datagrid/datagrid.example.module';\nimport { DataExporterExamplesModule } from '../components/data-exporter/data-exporter.examples.module';\nimport { CompodocSchema } from '../../../doc-lib/src/compodoc/compodoc-schema';\n\nimport localeFr from '@angular/common/locales/fr';\nimport localeEs from '@angular/common/locales/es';\n\nregisterLocaleData(localeFr, 'fr');\nregisterLocaleData(localeEs, 'es');\n\nconst supportedLocales = ['fr', 'es'];\nconst defaultLocale = 'en-US';\nconst LOCALE_SEPARATOR = '-';\n\nfunction getSupportedLocale(): string {\n    let partiallyMatchedLocale: string;\n    const completelyMatchedLocale = supportedLocales.find(\n        (supportedLocale: string) => navigator.language === supportedLocale\n    );\n    if (!completelyMatchedLocale) {\n        partiallyMatchedLocale = supportedLocales.find(\n            (supportedLocale: string) => navigator.language.split(LOCALE_SEPARATOR)[0] === supportedLocale\n        );\n    }\n    return completelyMatchedLocale || partiallyMatchedLocale || defaultLocale;\n}\n\n/**\n * The following 2 constants are declared for AOT compilation purpose. Otherwise, the compilation would silently fail and\n * the doc jsons are given as null to the DocLibModule.\n * NOTE: The following two has to be exported otherwise the AoT compiler won't see it.\n */\nexport const docJson1: CompodocSchema = componentsDocumentationJson;\nexport const docJson2: CompodocSchema = examplesDocumentationJson;\n\n@NgModule({\n    declarations: [AppComponent],\n    imports: [\n        BrowserModule,\n        AppRoutingModule,\n        ClarityModule,\n        BrowserAnimationsModule,\n        DocLibModule.forRoot([docJson1, docJson2]),\n        CliptexExamplesModule,\n        DatagridExamplesModule,\n        DataExporterExamplesModule,\n    ],\n    providers: [{ provide: LOCALE_ID, useValue: getSupportedLocale() }],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","\n        Resize the column and observe the text in the row where the textclip is used. Hover over the cell to see the\n        full text.\n\n        <clr-datagrid>\n            <clr-dg-column class=\"clip-text-width\">Text</clr-dg-column>\n            <clr-dg-column>Clipping</clr-dg-column>\n\n            <clr-dg-row>\n                <clr-dg-cell>\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit. In pharetra sem id mauris condimentum,\n                    dapibus pretium neque commodo. Pellentesque rhoncus tincidunt libero, eget tempus leo vehicula non.\n                    Etiam ac pulvinar odio.\n                </clr-dg-cell>\n                <clr-dg-cell>\n                    No\n                </clr-dg-cell>\n            </clr-dg-row>\n\n            <clr-dg-row>\n                <clr-dg-cell>\n                    <vcd-cliptext>\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. In pharetra sem id mauris condimentum,\n                        dapibus pretium neque commodo. Pellentesque rhoncus tincidunt libero, eget tempus leo vehicula\n                        non. Etiam ac pulvinar odio.\n                    </vcd-cliptext>\n                </clr-dg-cell>\n                <clr-dg-cell>\n                    Yes\n                </clr-dg-cell>\n            </clr-dg-row>\n        </clr-datagrid>\n    ","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'vcd-cliptext-datagrid-example',\n    styles: [\n        `\n            clr-datagrid .clip-text-width {\n                width: 200px;\n            }\n        `,\n    ],\n    template: `\n        Resize the column and observe the text in the row where the textclip is used. Hover over the cell to see the\n        full text.\n\n        <clr-datagrid>\n            <clr-dg-column class=\"clip-text-width\">Text</clr-dg-column>\n            <clr-dg-column>Clipping</clr-dg-column>\n\n            <clr-dg-row>\n                <clr-dg-cell>\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit. In pharetra sem id mauris condimentum,\n                    dapibus pretium neque commodo. Pellentesque rhoncus tincidunt libero, eget tempus leo vehicula non.\n                    Etiam ac pulvinar odio.\n                </clr-dg-cell>\n                <clr-dg-cell>\n                    No\n                </clr-dg-cell>\n            </clr-dg-row>\n\n            <clr-dg-row>\n                <clr-dg-cell>\n                    <vcd-cliptext>\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. In pharetra sem id mauris condimentum,\n                        dapibus pretium neque commodo. Pellentesque rhoncus tincidunt libero, eget tempus leo vehicula\n                        non. Etiam ac pulvinar odio.\n                    </vcd-cliptext>\n                </clr-dg-cell>\n                <clr-dg-cell>\n                    Yes\n                </clr-dg-cell>\n            </clr-dg-row>\n        </clr-datagrid>\n    `,\n})\nexport class CliptextDatagridExampleComponent {}\n","\n        <label>Dynamic text:</label>\n        <input placeholder=\"Write some text\" [formControl]=\"dynamicText\" />\n        <p>\n            Modify the input above and observe the text:\n            <vcd-cliptext [inlineWidth]=\"'200px'\">{{ dynamicText.value }}</vcd-cliptext>\n            You can try with long and short text. There is no tooltip when the text fits the provided width.\n        </p>\n        <p>The toolptip is updated upon display.</p>\n    ","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n    selector: 'vcd-cliptext-dynamic-inline-example',\n    styles: [\n        `\n            vcd-cliptext {\n                font-weight: bold;\n            }\n        `,\n    ],\n\n    template: `\n        <label>Dynamic text:</label>\n        <input placeholder=\"Write some text\" [formControl]=\"dynamicText\" />\n        <p>\n            Modify the input above and observe the text:\n            <vcd-cliptext [inlineWidth]=\"'200px'\">{{ dynamicText.value }}</vcd-cliptext>\n            You can try with long and short text. There is no tooltip when the text fits the provided width.\n        </p>\n        <p>The toolptip is updated upon display.</p>\n    `,\n})\nexport class CliptextDynamicInlineExampleComponent {\n    dynamicText = new FormControl('Dynamic text goes here');\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CliptextDatagridExampleComponent } from './cliptext-datagrid.example.component';\nimport { CliptextDynamicInlineExampleComponent } from './cliptext-dynamic-inline.example.component';\nimport { ClarityModule } from '@clr/angular';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { Documentation } from '@vcd/ui-doc-lib';\nimport { CliptextComponent, ComponentsModule } from '@vcd/ui-components';\n\nDocumentation.registerDocumentationEntry({\n    component: CliptextComponent,\n    displayName: 'Cliptext',\n    urlSegment: 'cliptext',\n    examples: [\n        {\n            component: CliptextDatagridExampleComponent,\n            forComponent: null,\n            title: 'Cliptext in a datagrid',\n        },\n        {\n            component: CliptextDynamicInlineExampleComponent,\n            forComponent: null,\n            title: 'Dynamic Inline Text',\n        },\n    ],\n});\n\n@NgModule({\n    declarations: [CliptextDatagridExampleComponent, CliptextDynamicInlineExampleComponent],\n    imports: [CommonModule, ClarityModule, ReactiveFormsModule, ComponentsModule],\n    exports: [CliptextDatagridExampleComponent, CliptextDynamicInlineExampleComponent],\n    entryComponents: [CliptextDatagridExampleComponent, CliptextDynamicInlineExampleComponent],\n})\nexport class CliptexExamplesModule {}\n","\n        <h2>Data Exporter</h2>\n        <button (click)=\"dataExporterOpen = true\">\n            Show Modal\n        </button>\n        <vcd-data-exporter\n            *ngIf=\"dataExporterOpen\"\n            [(open)]=\"dataExporterOpen\"\n            (dataExportRequest)=\"onExportRequest($event)\"\n            [columns]=\"exportColumns\"\n        >\n        </vcd-data-exporter>\n    ","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component } from '@angular/core';\nimport { DataExportRequestEvent, ExportColumn } from '@vcd/ui-components';\n\n@Component({\n    selector: 'vcd-data-exporter-example',\n    template: `\n        <h2>Data Exporter</h2>\n        <button (click)=\"dataExporterOpen = true\">\n            Show Modal\n        </button>\n        <vcd-data-exporter\n            *ngIf=\"dataExporterOpen\"\n            [(open)]=\"dataExporterOpen\"\n            (dataExportRequest)=\"onExportRequest($event)\"\n            [columns]=\"exportColumns\"\n        >\n        </vcd-data-exporter>\n    `,\n})\nexport class DataExporterExampleComponent {\n    exportColumns: ExportColumn[] = [\n        { fieldName: 'name', displayName: 'Name' },\n        { fieldName: 'desc', displayName: 'Description' },\n    ];\n\n    dataExporterOpen = false;\n\n    onExportRequest(request: DataExportRequestEvent): void {\n        let currentProgress = 0;\n\n        const updateProgress = () => {\n            currentProgress += 0.01;\n            if (currentProgress < 1) {\n                request.updateProgress(currentProgress);\n                setTimeout(updateProgress, 50);\n            } else {\n                request.exportData([\n                    { name: 'Jack', desc: 'Tis what tis' },\n                    { name: 'Jill', desc: 'Still tis what tis' },\n                ]);\n            }\n        };\n        updateProgress();\n    }\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { DataExporterExampleComponent } from './data-exporter.example.component';\nimport { CommonModule } from '@angular/common';\nimport { ClarityModule } from '@clr/angular';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { Documentation } from '@vcd/ui-doc-lib';\nimport { DataExporterComponent, ComponentsModule } from '@vcd/ui-components';\n\nDocumentation.registerDocumentationEntry({\n    component: DataExporterComponent,\n    displayName: 'Data Exporter',\n    urlSegment: 'dataExporter',\n    examples: [\n        {\n            component: DataExporterExampleComponent,\n            forComponent: null,\n            title: 'Data Exporter example',\n        },\n    ],\n});\n\n@NgModule({\n    declarations: [DataExporterExampleComponent],\n    imports: [CommonModule, ClarityModule, ReactiveFormsModule, ComponentsModule],\n    exports: [DataExporterExampleComponent],\n    entryComponents: [DataExporterExampleComponent],\n})\nexport class DataExporterExamplesModule {}\n","\n        <vcd-datagrid\n            [gridData]=\"gridData\"\n            (gridRefresh)=\"refresh($event)\"\n            [columns]=\"columns\"\n            [clrDatarowCssClassGetter]=\"clrDatarowCssClassGetter\"\n        ></vcd-datagrid>\n    ","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component } from '@angular/core';\nimport { GridDataFetchResult, GridState, GridColumn } from '@vcd/ui-components';\n\ninterface Data {\n    value: string;\n}\n\n/**\n * A component that holds an example of the css classes per row capability.\n */\n@Component({\n    selector: 'vcd-datagrid-css-classes-example',\n    styles: [\n        `\n            ::ng-deep .yellow-row {\n                background-color: greenyellow;\n            }\n\n            ::ng-deep .red-row {\n                background-color: lightcoral;\n            }\n        `,\n    ],\n    template: `\n        <vcd-datagrid\n            [gridData]=\"gridData\"\n            (gridRefresh)=\"refresh($event)\"\n            [columns]=\"columns\"\n            [clrDatarowCssClassGetter]=\"clrDatarowCssClassGetter\"\n        ></vcd-datagrid>\n    `,\n})\nexport class DatagridCssClassesExampleComponent {\n    gridData: GridDataFetchResult<Data> = {\n        items: [],\n    };\n\n    columns: GridColumn<Data>[] = [\n        {\n            displayName: 'Some Column',\n            renderer: 'value',\n        },\n    ];\n\n    refresh(eventData: GridState<Data>): void {\n        this.gridData = {\n            items: [{ value: 'warn' }, { value: 'error' }, { value: 'ok' }, { value: 'ok' }, { value: 'error' }],\n            totalItems: 2,\n            pageSize: 2,\n            page: 1,\n        };\n    }\n\n    clrDatarowCssClassGetter(entity: Data, index: number): string {\n        if (entity.value === 'warn') {\n            return 'yellow-row';\n        } else if (entity.value === 'error') {\n            return 'red-row';\n        } else {\n            return '';\n        }\n    }\n}\n","\n        <vcd-datagrid [gridData]=\"gridData\" (gridRefresh)=\"refresh($event)\" [columns]=\"columns\"></vcd-datagrid>\n    ","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component } from '@angular/core';\nimport { GridDataFetchResult, GridColumn, GridColumnHideable, GridState } from '@vcd/ui-components';\n\ninterface Data {\n    value: string;\n}\n\n/**\n * A component that holds an example of the show/hide columns capability.\n */\n@Component({\n    selector: 'vcd-datagrid-show-hide-example',\n    template: `\n        <vcd-datagrid [gridData]=\"gridData\" (gridRefresh)=\"refresh($event)\" [columns]=\"columns\"></vcd-datagrid>\n    `,\n})\nexport class DatagridShowHideExampleComponent {\n    gridData: GridDataFetchResult<Data> = {\n        items: [],\n    };\n\n    columns: GridColumn<Data>[] = [\n        {\n            displayName: 'Shown Initially',\n            renderer: 'value',\n            hideable: GridColumnHideable.Shown,\n        },\n        {\n            displayName: 'Hidden Initially',\n            renderer: 'value',\n            hideable: GridColumnHideable.Hidden,\n        },\n        {\n            displayName: 'Always Shown',\n            renderer: 'value',\n            hideable: GridColumnHideable.Never,\n        },\n        {\n            displayName: 'Always Shown Way #2',\n            renderer: 'value',\n        },\n    ];\n\n    refresh(eventData: GridState<Data>): void {\n        this.gridData = {\n            items: [{ value: 'a' }, { value: 'b' }],\n            totalItems: 2,\n            pageSize: 2,\n            page: 1,\n        };\n    }\n}\n","\n        <vcd-datagrid [gridData]=\"gridData\" (gridRefresh)=\"refresh($event)\" [columns]=\"columns\"></vcd-datagrid>\n    ","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component } from '@angular/core';\nimport {\n    BoldTextRendererComponent,\n    GridColumn,\n    GridDataFetchResult,\n    GridState,\n    RendererSpec,\n} from '@vcd/ui-components';\n\ninterface MockRecord {\n    name: string;\n    city: string;\n    state: string;\n    details: {\n        gender: string;\n    };\n    age: number;\n}\n\nconst mockData: MockRecord[] = [\n    {\n        name: 'Person 1',\n        city: 'Palo Alto',\n        state: 'CA',\n        details: {\n            gender: 'Male',\n        },\n        age: 30,\n    },\n    {\n        name: 'Person 2',\n        city: 'Boston',\n        state: 'MA',\n        details: {\n            gender: 'Female',\n        },\n        age: 60,\n    },\n];\n\n@Component({\n    template: `\n        <vcd-datagrid [gridData]=\"gridData\" (gridRefresh)=\"refresh($event)\" [columns]=\"columns\"></vcd-datagrid>\n    `,\n})\nexport class ThreeRenderersDatagridExampleComponent {\n    gridData: GridDataFetchResult<MockRecord> = {\n        items: [],\n    };\n\n    columns: GridColumn<MockRecord>[] = [\n        {\n            displayName: 'Component Renderer',\n            renderer: RendererSpec({\n                type: BoldTextRendererComponent,\n                config: record => ({\n                    text: record.name,\n                }),\n            }),\n        },\n        {\n            displayName: 'Function Renderer',\n            renderer: (record: MockRecord) => `${record.city}, ${record.state}`,\n        },\n\n        {\n            displayName: 'Default Renderer',\n            renderer: 'details.gender',\n        },\n    ];\n\n    refresh(eventData: GridState<MockRecord>): void {\n        this.gridData = {\n            items: mockData,\n            totalItems: 2,\n            pageSize: 2,\n            page: 1,\n        };\n    }\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClarityModule } from '@clr/angular';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { DatagridShowHideExampleComponent } from './datagrid-show-hide.example.component';\nimport { DatagridComponent, ComponentsModule } from '@vcd/ui-components';\nimport { Documentation } from '@vcd/ui-doc-lib';\nimport { DatagridCssClassesExampleComponent } from './datagrid-css-classes.example.component';\nimport { ThreeRenderersDatagridExampleComponent } from './datagrid-three-renderers.example.component';\n\nDocumentation.registerDocumentationEntry({\n    component: DatagridComponent,\n    displayName: 'Datagrid',\n    urlSegment: 'datagrid',\n    examples: [\n        {\n            component: ThreeRenderersDatagridExampleComponent,\n            forComponent: null,\n            title: 'Example with 3 types of grid renderers',\n        },\n        {\n            component: DatagridCssClassesExampleComponent,\n            forComponent: null,\n            title: 'Component that holds an example of the css classes per row capability',\n        },\n        {\n            component: DatagridShowHideExampleComponent,\n            forComponent: null,\n            title: 'Show/Hide datagrid columns example',\n        },\n    ],\n});\n\nconst declarations = [\n    DatagridShowHideExampleComponent,\n    DatagridCssClassesExampleComponent,\n    ThreeRenderersDatagridExampleComponent,\n];\n\n/**\n * A module that contains components that are various examples of features of the datagrid.\n */\n@NgModule({\n    declarations: [...declarations],\n    imports: [CommonModule, ClarityModule, ReactiveFormsModule, ComponentsModule],\n    exports: [...declarations],\n    entryComponents: [...declarations],\n})\nexport class DatagridExamplesModule {}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\n// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    production: false,\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n    enableProdMode();\n}\n\nplatformBrowserDynamic()\n    .bootstrapModule(AppModule)\n    .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}